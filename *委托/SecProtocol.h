//
//  SecProtocol.h
//  Objective-C-Object-below
//
//  Created by SpiColorPendra on 16/1/18.
//  Copyright © 2016年 SpiColorPendra. All rights reserved.
//


#import <Foundation/Foundation.h>

//协议是类中抽出一些方法，如何实现这个协议的类 都需要实现这里面的方法
// 这个协议就是Boss 发布的招聘公告，告诉全世界，我需要一个会发工资 回打电话的秘书!
// 有发工资的功能，打电话的功能
/*
 IOS上的协议类似于C#、Java上面的接口，他是从类中抽出来的一系列方法，但方法的实现是在实现这个协议的类中，任何实现这个协议的类都需要实现协议类中的@require方法；
 
 委托是一种设计模式，是一种设计思想。
 
 但是在IOS上面委托经常依托协议来实现（但并不是必须的）。一个很好的例子就是老板和秘书：老板要经营企业需要对新员工培训、对公司管理、打电话、发薪水等工作，但是对应老板来说一些事情例如打电话、发薪水的工作可以通过秘书来做，老板自己只负责对员工培训、公司管理，别的事情委托给秘书来做。委托思想就是在这种类似情况下产生的。
 
 再说一下为什么IOS上面的委托经常依赖协议来实现？就像老板需要一个会打电话、发薪水的秘书来减轻老板自己的工作，但是老板并不知道谁有这两项技能，那老板就会发一个招聘，招聘会这两项技能的人。但老板怎样知道应聘人员会这两项技能那，老板会通过你的学历和工作经验判断应聘人员是否会这两项技能；但是对于程序来说，在不知道这个类的内部情况下怎样知道这个类是不是可以委托，评判标准是啥？这个时候如果一个类实现一个有这两项技能的协议，则能很容易判断出这个类具有这两项技能。这个就是IOS上面为什么委托经常和协议一块用。
 */
@protocol SecProtocol <NSObject>

@required
//发工资
- (void) payoff;
//打电话
- (void) tel;

@optional


@end